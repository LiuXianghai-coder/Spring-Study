<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!-- namespace 对应相关的 DAO 接口，Mybatis 会根据这个接口通过代理的方式生成对应的数据访问对象 -->
<mapper namespace="com.example.demo.mapper.UserInfoMapper">
    <sql id="allColumn">
        id, user_name, user_age, created_time, created_user, updated_user, updated_time
    </sql>

    <!-- 一个简单的查询，这里没有配置 ORM 关系，因此会直接将列名映射为对象的属性名 -->
    <select id="getUserById" parameterType="long" resultType="com.example.demo.entity.UserInfo">
        SELECT
        <include refid="allColumn"/> <!-- 引入之前的列名集合 -->
        FROM
            user_info
        WHERE
            id=#{id}
    </select>

    <insert id="insert" parameterType="com.example.demo.entity.UserInfo" >
        INSERT INTO user_info(<include refid="allColumn" />)
        VALUES (#{id}, #{name}, #{age}, #{createdTime}, #{createdUser}, #{updatedUser}, #{updatedTime})
    </insert>

    <select id="selectByName" resultMap="BaseResult" parameterType="string">
        SELECT <include refid="allColumn" /> FROM user_info WHERE user_name=#{name}
    </select>

    <select id="selectByAge" resultMap="BaseResult" parameterType="integer">
        SELECT <include refid="allColumn" /> FROM user_info WHERE user_age=#{age}
    </select>

    <select id="selectViewsById" resultMap="FriendResult" parameterType="long">
        SELECT * FROM user_info WHERE id=#{id}
    </select>

    <select id="selectByParam" parameterType="com.example.demo.entity.UserInfo" resultMap="BaseResult">
        SELECT * FROM user_info
        WHERE 1=1
          <if test="param.age != 0">
              AND user_age=#{param.age}
          </if>
        <if test="param.name != null and param.name.length() > 0" >
            AND user_name LIKE concat('%', #{param.name}, '%')
        </if>
    </select>

    <resultMap id="BaseResult" type="com.example.demo.entity.UserInfo">
        <id column="id" property="id"/>
        <result column="user_name" property="name"/>
        <result column="user_age" property="age"/>
        <result column="created_time" property="createdTime"/>
        <result column="created_user" property="createdUser"/>
        <result column="updated_time" property="updatedTime"/>
        <result column="updated_user" property="updatedUser"/>
    </resultMap>

    <resultMap id="FriendResult" type="com.example.demo.entity.UserInfoView" extends="BaseResult">
        <collection property="friends" column="id" ofType="string" select="selectFriend" />
    </resultMap>

    <select id="selectFriend" resultType="string">
        SELECT fri_id FROM friend_info WHERE user_id=#{id}
    </select>
</mapper>
